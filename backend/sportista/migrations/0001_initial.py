# Generated by Django 4.2.1 on 2023-05-15 11:01

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Fields',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=255)),
                ('details', models.CharField(max_length=1000)),
                ('image', models.ImageField(null=True, upload_to='')),
                ('starts', models.TimeField()),
                ('ends', models.TimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Sports',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('gender', models.BooleanField()),
                ('date_of_birth', models.DateField()),
                ('favourite_fields', models.ManyToManyField(blank=True, related_name='users_favourite_set', to='sportista.fields')),
                ('plays_sports', models.ManyToManyField(to='sportista.sports')),
            ],
        ),
        migrations.CreateModel(
            name='UserGradesField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.IntegerField()),
                ('id_fielda', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sportista.fields')),
                ('id_usera', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sportista.users')),
            ],
        ),
        migrations.CreateModel(
            name='Teams',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('id_leader', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams_leader_set', to='sportista.users')),
                ('plays_sport', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams_sport_set', to='sportista.sports')),
                ('users', models.ManyToManyField(blank=True, related_name='teams_users_set', to='sportista.users')),
            ],
        ),
        migrations.CreateModel(
            name='TeamRentsField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('beginning', models.DateTimeField()),
                ('ending', models.DateTimeField()),
                ('id_fielda', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sportista.fields')),
                ('id_teama', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sportista.teams')),
            ],
        ),
        migrations.CreateModel(
            name='Renters',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('phone_number', models.CharField(max_length=255)),
                ('has_sports', models.ManyToManyField(to='sportista.sports')),
            ],
        ),
        migrations.AddField(
            model_name='fields',
            name='grades',
            field=models.ManyToManyField(blank=True, through='sportista.UserGradesField', to='sportista.users'),
        ),
        migrations.AddField(
            model_name='fields',
            name='has_teams',
            field=models.ManyToManyField(blank=True, through='sportista.TeamRentsField', to='sportista.teams'),
        ),
        migrations.AddField(
            model_name='fields',
            name='id_rentera',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sportista.renters'),
        ),
        migrations.AddField(
            model_name='fields',
            name='is_sport',
            field=models.ManyToManyField(to='sportista.sports'),
        ),
        migrations.CreateModel(
            name='UserAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('city', models.CharField(max_length=255)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('id_rentera', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='authenticate_user_set_renter', to='sportista.renters')),
                ('id_usera', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='authenticate_user_set_user', to='sportista.users')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
